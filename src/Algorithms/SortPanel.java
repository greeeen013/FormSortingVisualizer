package Algorithms;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

// T≈ô√≠da pro vykreslov√°n√≠ a zobrazen√≠ grafu ≈ôad√≠c√≠ho algoritmu
public class SortPanel extends JPanel {
    private int[] values; // Pole hodnot, kter√© budeme vykreslovat (ƒç√≠sla, kter√° budou vizualizov√°na)
    private int activeIndex = -1; // Index aktu√°lnƒõ aktivn√≠ho prvku (ƒçerven√Ω prvek, kter√Ω se pr√°vƒõ zpracov√°v√°)
    private int compareIndex = -1; // Index prvku, kter√Ω je pr√°vƒõ porovn√°v√°n s aktivn√≠m (≈ælut√Ω prvek)
    private Set<Integer> sortedIndices = new HashSet<>(); // Sada, kter√° uchov√°v√° indexy ji≈æ se≈ôazen√Ωch prvk≈Ø (zelen√©)

    private int sortedUntil = -1; // Pomocn√° promƒõnn√° pro oznaƒçen√≠, dokud kam byly prvky se≈ôazeny (pou≈æ√≠v√°no k optimalizaci)

    // Metoda pro nastaven√≠ indexu do kter√©ho byly prvky ji≈æ se≈ôazeny
    public void setSortedUntil(int index) {
        this.sortedUntil = index;
    }

    // Generov√°n√≠ nov√©ho pole hodnot
    // Pokud je parametr 'ordered' true, pole bude se≈ôazen√© (v≈ædy o +1), pokud false, n√°hodnƒõ (o +0,2 nebo 1,8)
    public void generateArray(int size, boolean ordered) {
        values = new int[size];

        // Pokud m√° b√Ωt pole se≈ôazen√©
        if (ordered) {
            for (int i = 0; i < size; i++) {
                values[i] = (int) ((i + 1) * (getHeight() - 20) / (double) size);
            }

            // Zam√≠ch√°n√≠ hodnot v poli, aby byly n√°hodn√©
            List<Integer> list = new ArrayList<>();
            for (int val : values) list.add(val); // P≈ôid√°me hodnoty do listu
            Collections.shuffle(list); // Zam√≠ch√°me je
            for (int i = 0; i < size; i++) values[i] = list.get(i); // Vr√°t√≠me zpƒõt zam√≠chan√© hodnoty do pole

        } else {
            Random rand = new Random();
            // Pokud m√° b√Ωt pole n√°hodn√©
            for (int i = 0; i < size; i++) {
                values[i] = rand.nextInt(getHeight() - 20) + 10; // Generov√°n√≠ n√°hodn√Ωch hodnot mezi 10 a v√Ω≈°kou panelu
            }
        }
        setBackground(Color.BLACK); // Nastaven√≠ pozad√≠ na ƒçernou
        repaint(); // P≈ôekreslen√≠ panelu s nov√Ωmi hodnotami
    }

    // Getter pro hodnoty pole
    public int[] getValues() {
        return values;
    }

    // Setter pro hodnoty pole
    public void setValues(int[] newValues) {
        this.values = newValues;
        repaint(); // P≈ôekreslen√≠ panelu s nov√Ωmi hodnotami
    }

    // Zv√Ωraznƒõn√≠ dvou prvk≈Ø - jeden je aktivn√≠ (red), druh√Ω je porovn√°van√Ω (yellow)
    public void highlight(int i, int j) {
        this.activeIndex = i;
        this.compareIndex = j;
        repaint(); // P≈ôekreslen√≠ panelu s nov√Ωmi zv√Ωraznƒõn√Ωmi hodnotami
    }

    // Odstranƒõn√≠ zv√Ωraznƒõn√≠
    public void clearHighlight() {
        this.activeIndex = -1;
        this.compareIndex = -1;
    }

    // Oznaƒçen√≠ prvku jako se≈ôazen√©ho (zelen√Ω)
    public void markSorted(int index) {
        sortedIndices.add(index); // P≈ôid√°n√≠ indexu do seznamu se≈ôazen√Ωch
        repaint(); // P≈ôekreslen√≠ panelu
    }

    // Vyƒçi≈°tƒõn√≠ seznamu se≈ôazen√Ωch prvk≈Ø
    public void clearSorted() {
        sortedIndices.clear(); // Odstranƒõn√≠ v≈°ech se≈ôazen√Ωch prvk≈Ø
    }

    // Metoda pro vykreslen√≠ cel√©ho panelu
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (values == null) return; // Pokud nejsou hodnoty, neprov√°d√≠ se vykreslov√°n√≠

        int panelWidth = getWidth(); // ≈†√≠≈ôka panelu
        int count = values.length; // Poƒçet hodnot (prvk≈Ø)
        double barWidth = (double) panelWidth / count; // ≈†√≠≈ôka ka≈æd√©ho sloupce na z√°kladƒõ poƒçtu prvk≈Ø

        // Pro ka≈æd√Ω prvek vykresl√≠me odpov√≠daj√≠c√≠ sloupec
        for (int i = 0; i < count; i++) {
            int x = (int) Math.round(i * barWidth); // V√Ωpoƒçet X pozice pro aktu√°ln√≠ sloupec
            int nextX = (int) Math.round((i + 1) * barWidth); // V√Ωpoƒçet X pozice pro dal≈°√≠ sloupec
            int width = nextX - x - 1; // V√Ωpoƒçet ≈°√≠≈ôky sloupce, aby mƒõl minim√°lnƒõ ≈°√≠≈ôku 1 pixel
            if (width < 1) width = 1; // Oprava pro p≈ô√≠pad, kdy je ≈°√≠≈ôka 0

            // Urƒçujeme barvu sloupce podle toho, zda je ji≈æ se≈ôazen√Ω, aktivn√≠ nebo porovn√°van√Ω
            if (sortedIndices.contains(i)) {
                g.setColor(Color.GREEN); // ‚úÖ Se≈ôazen√Ω prvek
            } else if (i == activeIndex) {
                g.setColor(Color.RED); // üî¥ Aktivn√≠ prvek
            } else if (i == compareIndex) {
                g.setColor(Color.YELLOW); // üü° Porovn√°van√Ω prvek
            } else
                g.setColor(Color.BLUE); // üîµ Nezpracovan√Ω / v√Ωchoz√≠ prvek

            int barHeight = values[i]; // V√Ω≈°ka sloupce odpov√≠d√° hodnotƒõ v poli
            g.fillRect(x, getHeight() - barHeight, width, barHeight); // Vykreslen√≠ sloupce na panelu
        }
    }
}
